{"version":3,"sources":["pages/Context.js","component/Control.js","pages/Demo02.js","pages/Demo01.js","pages/App.js","pages/Hoc.js","homework/Input.js","homework/List.js","homework/TodoList.js","index.js"],"names":["Context","Component","React","createContext","Demo02","Consumer","data","map","item","key","changeData","onClick","Demo01","props","style","widet","height","defaultProps","name","console","log","withFetch","Com","url","Topic","state","fetch","then","res","json","setState","this","displayName","Input","dangerouslySetInnerHTML","__html","content","title","type","ref","refs","value","onChange","addTodo","List","renderTodos","done","todos","todo","idx","toggle","checked","delButton","tds","doing","filter","finish","length","TodoList","handleChange","e","inpValue","target","index","localStorage","setItem","JSON","stringify","newTodos","getItem","parse","id","inp","input","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5648df2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { Component } from \"react\"\r\n//组件名首字母一定要大写\r\nclass Control extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            inpValue: \"\",\r\n            todos: [\r\n                { title: \"1\", done: false },\r\n                { title: \"2\", done: true },\r\n                { title: \"3\", done: true },\r\n                { title: \"4\", done: false }\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ inpValue: e.target.value })\r\n    }\r\n    componentDidMount() {\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem(\"todos\");\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    ComponentDidUpdate=()=>{\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    addTodo = () => {\r\n        // this.state.todos.push({title:this.state.inpValue})\r\n        // //this.state.todo是之前的，现在要加完了的\r\n        //空值不能加,''就是空值，不是null或none\r\n        if(this.state.inpValue == ''){\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            // todos:this.state.todos\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        });//setate是异步的\r\n        this.state.inpValue ='';\r\n    }\r\n    delTodo = (idx) => {\r\n        //删除完再更新\r\n        //第一种\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        //深拷贝，解除和原来的todos的关系\r\n        newTodos.splice(idx, 1);\r\n        this.setState({ todos: newTodos })\r\n\r\n        //第二种\r\n        this.setState({\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        });\r\n\r\n    }\r\n    taggle=(index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done=!newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n        // setstate是异步的，用callback回调方法      \r\n    }\r\n    renderTodos = (done) => {\r\n\r\n        return this.state.todos.map((todo, idx) => {\r\n            if (done == todo.done) {\r\n                return <li>\r\n                    <input  \r\n                    onClick={()=>this.taggle(idx)}\r\n                    checked={done}\r\n                    type=\"checkbox\"\r\n                    />\r\n                    {/* 可以识别标签，自动显示 */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={() => this.delTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        \r\n        const { todos, inpValue } = this.state;\r\n        let arr1 = todos.filter(item => !item.done);\r\n        // console.log(arr1)\r\n        return (\r\n            <div className=\"box\">\r\n                {/* 点击todolist输入框获得焦点 */}\r\n                <label htmlFor='inp'>todoList</label>\r\n                <input\r\n                id='inp'\r\n                    ref={inp => this.input = inp}\r\n                    value={this.state.inpValue}\r\n                    type=\"text\"\r\n                    onChange={this.handleChange} />\r\n                <button onClick={this.addTodo}>添加</button>\r\n                {/* 直接onclick调用函数不能传参，所以用箭头函数在掉一个传参 */}\r\n                <h2>正在进行的</h2>\r\n                <ul>\r\n                    {/* //()是一个整体的包裹作用，可以换行 */}\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成的</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n                {\r\n                <button>{2>3?\"登录\":\"注册\"}</button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control","import React from 'react';\r\nimport Context from './Context';\r\nimport Demo01 from './Demo01'\r\n\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            \r\n            <Context.Consumer>\r\n            {\r\n                ({data})=>data.map(item=><li key={item}>{item}</li>)\r\n            }\r\n            </Context.Consumer> \r\n            <Context.Consumer>\r\n                {\r\n                    ({changeData})=><button onClick={()=>changeData(123)}>点击</button>\r\n                }\r\n            </Context.Consumer>\r\n                   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02\r\n","// //rcc+enter\r\n// import React, { Component } from 'react'\r\n\r\n// export default class demo01 extends Component {\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// //rfc+enter\r\n// import React from 'react'\r\n\r\n// export default function demo01() {\r\n//     return (\r\n//         <div>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// //rafce+enter\r\n// import React from 'react'\r\n\r\n// const demo01 = () => {\r\n//     return (\r\n//         <div>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default demo01\r\n\r\nimport React from 'react';\r\nimport propTypes from 'prop-types'\r\nimport Context from './Context'\r\nimport Demo02 from './Demo02';\r\n\r\n// Context\r\n\r\nconst Demo01 = (props) => {\r\n    return (\r\n        <div style={{ \r\n            widet: 100, \r\n            height: 100, \r\n            }}>\r\n            <h2>context</h2>\r\n            <h2>Demo01</h2>\r\n            <ul>\r\n                <Context.Consumer>\r\n                    {\r\n                        data => data.data.map(\r\n                            ({data})=>data.map(\r\n                                (item)=><li key={item}>{item}</li>\r\n                                )\r\n                            \r\n                            //map()方法是数组的方法，只有数组才能调用呢，不是数数组的话是undefined\r\n                            //data是个对象，data.data是一个属性值，必须是数组时才不报错\r\n                            )\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n            <Demo02/>\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo01.propTypes = {\r\n    name: propTypes.string.isRequired\r\n};\r\n\r\nDemo01.defaultProps = {\r\n    name: 'tom'\r\n}\r\n\r\nexport default Demo01;\r\n\r\n","import React from 'react';\r\nimport Context from './Context';//同级./\r\nimport Demo01 from './Demo01';\r\nimport {render} from 'react-dom';\r\n\r\nconsole.log(Context);\r\n\r\n// const App = ()=>{\r\n//     let data = {data:['hello','context']}\r\n//     return (\r\n//         <Context.Provider value={data}>\r\n//             <Demo01/>\r\n//             </Context.Provider>\r\n//     )\r\n// }\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: ['hello', 'context']\r\n        }\r\n    }\r\n    changeData = (newData) => {\r\n        this.setData({ data: [...this.state.data, newData] })\r\n    }\r\n    render() {\r\n        return (\r\n            <Context.provider value={{\r\n                data: this.state.data,\r\n                changeData: this.changeData\r\n            }}>\r\n                <Demo01/>\r\n            </Context.provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","//higher order component\r\n\r\nimport React,{Component} from 'react'\r\nimport { render } from 'react-dom'\r\n\r\n\r\nconst withFetch = (Com,url)=>{\r\n     class Topic extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state={\r\n                data:[]            \r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res=>res.json())\r\n            .then(res=>this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com {...this.props.data} data={this.state.data}/>\r\n        }\r\n    }\r\n    Topic.displayName = `withFetch(${Com.name})`\r\n    return Topic\r\n}\r\n\r\n// export class Detail extends Component{\r\n//     constructor(){\r\n//         super();\r\n//         this.state={\r\n//             data:''\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount(){\r\n//         fetch('https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312')\r\n//         .then(res=>res.json())\r\n//         .then(res=>this.setState({data:res.data.content}))\r\n//     }\r\n//     render(){\r\n//         return <div>\r\n//             <h1>标题</h1>\r\n//             <div>\r\n//                 {this.state.data}\r\n//             </div>\r\n//         </div>\r\n//     }\r\n// }\r\n\r\n\r\nconst De = (props) => {\r\n    return <div>\r\n        <h1>标题</h1>\r\n        <div dangerouslySetInnerHTML={{__html:props.data.content}}></div>\r\n    </div>\r\n}\r\n\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312');\r\n\r\nconst Ho=(props)=>{\r\n    console.log(props.data);\r\n    return <ul>\r\n        {\r\n            props.data.map((item)=><li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n}\r\n\r\nconst Hoc = withFetch(Ho,'https://cnodejs.org/api/v1/topics')\r\n\r\n\r\n\r\n// class Hoc extends Component{\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state={\r\n    //         data:[]\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     fetch('https://cnodejs.org/api/v1/topics')\r\n    //     .then(res=>res.json())\r\n    //     .then(res=>this.setState({data:res.data}))\r\n    // }\r\n// \r\n//     render(){\r\n//         console.log(this.state.data)\r\n//         return(\r\n//             <div>\r\n//                 Hoc\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Hoc","import React,{Component} from 'react'\r\n\r\nclass Input extends Component{\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <input\r\n                type='text'\r\n                ref={this.props.refs}\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input","import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    renderTodos = (done) => {\r\n        return this.props.todos.map((todo, idx) => {\r\n            if (done == todo.done) {\r\n                return <li>\r\n                    <input\r\n                        onClick={() => this.props.toggle(idx)}\r\n                        checked={done}\r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span>{todo.title}</span>\r\n                    <button onClick={() => this.props.delButton(idx)}>删除</button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        let tds = this.props.todos;\r\n        let doing = tds.filter(item => !item.done);\r\n        let finish = tds.filter(item => item.done);\r\n        return (\r\n            <div>\r\n                <h2>正在进行的{doing.length}</h2>\r\n                <ul>{this.renderTodos(false)}</ul>\r\n                <h2>已经完成的{finish.length}</h2>\r\n                <ul>{this.renderTodos(true)}</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\r\nimport Input from './Input'\r\nimport List from './List'\r\n\r\nclass TodoList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos: [{ title: '123', done: false }]\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        //inpvalue绑定state\r\n        this.setState({ inpValue: e.target.value })\r\n    }\r\n\r\n    //点击刷新\r\n    componentDidMount() {\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if (todos) {\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    //自动更新会\r\n    componentDidUpdate() {\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (this.state.inpValue === '') {\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        }\r\n        this.state.inpValue = '';\r\n    }\r\n\r\n    delButton = (idx) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        },\r\n            () => {\r\n                localStorage.setItem(\r\n                    'todos',\r\n                    JSON.stringify(this.state.todos)\r\n                )\r\n            });\r\n    }\r\n\r\n    toggle = (index) => {\r\n        let newTodos = this.state.todos;\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { todos, inpValue } = this.state;\r\n        return (\r\n            <div>\r\n                <Input id='inp'\r\n                    value={this.state.inpValue}\r\n                    addTodo={this.addTodo}\r\n                    onChange={this.handleChange}\r\n                    refs={inp => this.input = inp}\r\n                />\r\n                <List delButton={this.delButton}\r\n                    toggle={this.toggle}\r\n                    todos={this.state.todos}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList","import React, { Children, createElement } from 'react';//从node_modules引入的\r\nimport ReactDOM from 'react-dom';\r\nimport Control from \"./component/Control\";\r\nimport Demo01 from './pages/Demo01'\r\nimport App from './pages/App'\r\nimport Hoc, { Detail } from './pages/Hoc'\r\nimport Hook from './pages/Hook'\r\nimport Context from './pages/Context'\r\nimport TodoList from './homework/TodoList'\r\nimport Input from './homework/Input'\r\nimport List from './homework/List'\r\n\r\n//01-基础组件应用\r\nReactDOM.render(\r\n  <TodoList/>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// ReactDOM.render(\r\n//   <Context.Provider value='123'>\r\n//     <Hook/>\r\n//   </Context.Provider>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n// ReactDOM.render(\r\n//   <div><Hoc/><Detail/></div>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   <App/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   <Demo01/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   <Control/>,\r\n//   document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n// console.log($);\r\n\r\n\r\n\r\n// let ele = React.createElement(\r\n//     'h1',\r\n//     {id:'title'},\r\n//     React.createElement('div',{},'hello'),\r\n//     'react'\r\n//   )\r\n//   console.log(ele)\r\n//    ReactDOM.render(\r\n//       <div>ddd</div>,\r\n//       document.getElementById(\"root\")\r\n\r\n//     )\r\n\r\n\r\n//ctrl+alt+↑/↓ 向上/下复制\r\n//ctrl+d 删除\r\n// crtl+shift+←/→ 向左/右选中单词\r\n\r\n//list展示数据，数据都在home中\r\n// const List = (props) => {\r\n//   return <ul>\r\n//     {\r\n//       //map 一定要写return返回值\r\n//       props.data.map(\r\n//         (item) => <li key={item.id}>{item.title}</li>\r\n//       )\r\n//     }\r\n//   </ul>\r\n// }\r\n\r\n\r\n\r\n// const Buttons = () => {\r\n//   // const btns = [1, 2, 3, 4, 5];\r\n//   const handleClick = (num) => {\r\n//     //事件对象\r\n//     console.log(num)\r\n//   }\r\n//   return <div>\r\n//     {//循环别忘了外面的{}\r\n\r\n//       // btns.map(\r\n//       //   (item) =>\r\n//       //     // <button key={item}>{item}</button>\r\n//       //     <button key={item}\r\n//       //       onClick={handleClick()}>\r\n//       //       {/* handle这不能传参 */}\r\n//       //       {item}\r\n//       //       {/* 外层是个数件处理函数，里层是个普通函数调用 */}\r\n//       //     </button>\r\n//       // )\r\n//     }\r\n//   </div>\r\n// }\r\n\r\n//类组件extends，可以加状态\r\n// class Home extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       data: []\r\n//     }\r\n//     this.handleClick = this.handleClick.bind(this)\r\n//     // 点一次执行一次bind\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     fetch(\"https://cnodejs.org/api/v1/topics\")\r\n//       .then(res => res.json())\r\n//       .then(({ data }) => {\r\n//         console.log(data)\r\n//         this.setState({ data })//data是个对象\r\n//       })\r\n//   }\r\n//   //类里面写事件处理函数用箭头函数\r\n//   handleClick = () => {\r\n//     console.log(\"hello\");\r\n//   }\r\n\r\n//   getData = (page) => {\r\n//     fetch(\"https://cnodejs.org/api/v1/topics?page=\"+page)\r\n//       .then(res => res.json())\r\n//       .then(({ data }) => {\r\n//         this.setState({data})\r\n//       })\r\n//     console.log(page)\r\n//   }\r\n//   render() {\r\n//     const { data } = this.state;\r\n//     const btns=[1,2,3,4,5];\r\n//     return <div>\r\n//       {\r\n//         btns.map(\r\n//         (item)=>(\r\n//           <button\r\n//         key={item}\r\n//         onClick={()=>this.getData(item)}>\r\n//           {item}\r\n//         </button>\r\n//         )\r\n//       )\r\n//       }\r\n//       <Buttons />\r\n//       <List data={data} />\r\n\r\n//     </div>\r\n\r\n//     // const {data} = this.state;\r\n//     // return <ul>\r\n//     //   {\r\n//     //     this.state.data.map(\r\n//     //       (item)=><li>{item.title}</li>\r\n//     //     )\r\n//     //   }\r\n//     // </ul>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Home data=\"abc\" />,\r\n//   document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n// let ele = <h1>hello react!</h1>\r\n\r\n// let ele = React.createElement(\"h1\",\r\n// {id:\"title\"},\r\n// \"hello\"\r\n// )\r\n\r\n// console.log(ele)\r\n\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <h1>hello react!</h1>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// 时钟\r\n// setInterval(() => {\r\n//   let ele = <h1 id=\"title\" className=\"tit\">\r\n//     <div>当前时间</div>\r\n//     {new Date().toLocaleString()}\r\n//   </h1>\r\n//   ReactDOM.render(\r\n//     ele,\r\n//     document.getElementById(\"root\")\r\n//   )\r\n// }, 1000);\r\n\r\n// //函数组件，UI（展示）组件，木偶组件，传什么渲染什么没有逻辑，没生命周期，必须return出一个jsx表达式\r\n// function App(props){\r\n//   console.log(props);\r\n//   const{title,id} = props;\r\n//   return <div>\r\n//     {/* 这是个组件不是变量了 */}\r\n//     {/* <div>{props.title}</div> */}\r\n//     <div>world</div>\r\n//   </div>\r\n// }\r\n\r\n// ReactDOM.render(\r\n//   <App title=\"abc\"/>,\r\n//   document.getElementById(\"root\")\r\n\r\n// )\r\n\r\n// //智能组件，类组件,有生命周期，必须return出一个jsx表达式\r\n// class Demo extends React.Component{\r\n//   //必须render()方法\r\n\r\n//   constructor(){\r\n//     //consttructor里必须调用super()\r\n//     super();\r\n//     //声明状态\r\n//     this.state={\r\n//       name:\"tom\"\r\n//     }\r\n//     //setTimeout后面跟箭头函数。this要指向demo要改的而不是window\r\n//     setInterval(()=>{\r\n//       //这个state不能这样改\r\n//       // this.state.name=\"anc\"\r\n//       //用setstate改，操作数据然后修改页面\r\n//       this.setState({name:new Date().toLocaleString()})\r\n//     },1000)\r\n//   }\r\n//     render(){\r\n//       return <div>\r\n//         <div>{this.state.name}</div>\r\n//     {/* 这个this默认指向那？？ */}\r\n//         <App title={this.state.name}/>\r\n//       </div>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Demo/>,\r\n//   document.getElementById(\"root\")\r\n\r\n// )\r\n\r\n\r\n\r\n// //实现ReactDOM.Render()，把一个js对象写入页面\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     //渲染对象，渲染到那（容器）\r\n//     //解构赋值\r\n//     const {type,props} = eleObj;\r\n//     //创建最外层节点\r\n//     let ele = document.createElement(type);\r\n//     //遍历属性对象，将属性添加到最外层节点对象中\r\n//     for (const prop in props) {\r\n//       if (prop ==\"children\"){\r\n//         if (typeof props.children == \"string\"){\r\n//           const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//             break;\r\n//         }\r\n//         //将最外层的子元素加进去\r\n//         props.children.forEach(child => {\r\n//           if (typeof child ==\"string\"){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             //递归，直到最里层\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{\r\n//         ele[prop]=props[prop];\r\n//       }\r\n//     }\r\n\r\n//     //将第一层dom节点加入容器中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// ReactDOM.render(\r\n//   <div>ddd</div>,\r\n//   document.getElementById(\"root\")\r\n\r\n// )"],"sourceRoot":""}